name: Add new organization discussions to project

on:
  discussion:
    types: [created, reopened]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Get Project ID and Add Discussion
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const fs = require('fs');
            const eventPayload = JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8'));
            console.log('Event payload:', JSON.stringify(eventPayload, null, 2));
            
            const orgLogin = eventPayload.organization.login;
            const discussion = eventPayload.discussion;
            
            console.log(`Organization: ${orgLogin}, Discussion Number: ${discussion.number}`);
            
            // First, get the project ID
            const getProjectIdQuery = `
              query($org: String!, $number: Int!) {
                organization(login: $org){
                  projectV2(number: $number) {
                    id
                  }
                }
              }
            `;
            
            let projectId;
            try {
              const projectResult = await github.graphql(getProjectIdQuery, {
                org: orgLogin,
                number: 3
              });
              projectId = projectResult.organization.projectV2.id;
              console.log('Project ID:', projectId);
            } catch (error) {
              console.error('Error fetching Project ID:', error);
              throw error;
            }
            
            // Now, add the discussion to the project
            const addToProjectQuery = `
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;
            
            try {
              const result = await github.graphql(addToProjectQuery, {
                projectId: projectId,
                contentId: discussion.node_id
              });
              
              console.log('Added to project:', JSON.stringify(result, null, 2));
              
              return result.addProjectV2ItemById.item.id;
            } catch (error) {
              console.error('Error adding to project:', error);
              if (error.errors) {
                error.errors.forEach((e, i) => console.error(`Error ${i + 1}:`, e));
              }
              throw error;
            }