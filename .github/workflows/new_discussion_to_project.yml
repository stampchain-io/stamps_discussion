name: Add new discussions to project

on:
  discussion:
    types: [created, reopened]

jobs:
  add-to-project:
    name: Add discussion to project
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Add to project
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const projectId = 'PVT_kwDOCAGLAM4Anzfw';
            const discussionNumber = context.payload.discussion.number;
            const orgName = 'stampchain-io';
            const repoName = 'stamps_discussion';

            console.log(`Adding discussion #${discussionNumber} to project ${projectId}`);

            try {
              // First, get the discussion ID
              const { repository } = await github.graphql(`
                query($orgName: String!, $repoName: String!, $number: Int!) {
                  repository(owner: $orgName, name: $repoName) {
                    discussion(number: $number) {
                      id
                    }
                  }
                }
              `, {
                orgName,
                repoName,
                number: discussionNumber
              });

              const discussionId = repository.discussion.id;

              // Now add the discussion to the project
              const response = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId,
                contentId: discussionId
              });

              console.log('Added to project:', JSON.stringify(response, null, 2));
            } catch (error) {
              console.error('Error:', error.message);
              if (error.errors) {
                error.errors.forEach((e, i) => console.error(`Error ${i + 1}:`, e));
              }
              core.setFailed(error.message);
            }
